---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-tables-in-trino
spec:
  template:
    spec:
      containers:
        - name: create-tables-in-trino
          image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable24.11.0
          command: ["bash", "-c", "python -u /tmp/script/script.py"]
          volumeMounts:
            - name: script
              mountPath: /tmp/script
            - name: trino-users
              mountPath: /trino-users
      volumes:
        - name: script
          configMap:
            name: create-tables-in-trino-script
        - name: trino-users
          secret:
            secretName: trino-users
      restartPolicy: OnFailure
  backoffLimit: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-tables-in-trino-script
data:
  script.py: |
    import sys
    import trino

    if not sys.warnoptions:
        import warnings
    warnings.simplefilter("ignore")

    def get_connection():
        connection = trino.dbapi.connect(
            host="trino-coordinator",
            port=8443,
            user="admin",
            http_scheme='https',
            auth=trino.auth.BasicAuthentication("admin", open("/trino-users/admin").read()),
        )
        connection._http_session.verify = False
        return connection

    def run_query(connection, query):
        print(f"[DEBUG] Executing query {query}")
        cursor = connection.cursor()
        cursor.execute(query)
        return cursor.fetchall()

    def run_query_and_assert_more_than_one_row(connection, query):
        rows = run_query(connection, query)[0][0]
        assert rows > 0

    connection = get_connection()

    run_query(connection, "CREATE SCHEMA IF NOT EXISTS lakehouse.tpch WITH (location = 's3://lakehouse/lakehouse/tpch')")

    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.nation AS SELECT * FROM tpch.sf5.nation")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.region AS SELECT * FROM tpch.sf5.region")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.part AS SELECT * FROM tpch.sf5.part")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.partsupp AS SELECT * FROM tpch.sf5.partsupp")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.supplier AS SELECT * FROM tpch.sf5.supplier")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.customer AS SELECT * FROM tpch.sf5.customer")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.orders AS SELECT * FROM tpch.sf5.orders")
    run_query(connection, "CREATE TABLE IF NOT EXISTS lakehouse.tpch.lineitem AS SELECT * FROM tpch.sf5.lineitem")
    

    run_query(connection, """
        create or replace view table_information as
        with
            table_infos as (
                select 'nation' as "table", (select count(*) from nation) as records, (select count(*) from "nation$snapshots") as snapshots
                union all select 'region' as "table", (select count(*) from region) as records, (select count(*) from "region$snapshots") as snapshots
                union all select 'part' as "table", (select count(*) from part) as records, (select count(*) from "part$snapshots") as snapshots
                union all select 'partsupp' as "table", (select count(*) from partsupp) as records, (select count(*) from "partsupp$snapshots") as snapshots
                union all select 'supplier' as "table", (select count(*) from supplier) as records, (select count(*) from "supplier$snapshots") as snapshots
                union all select 'customer' as "table", (select count(*) from customer) as records, (select count(*) from "customer$snapshots") as snapshots
                union all select 'orders' as "table", (select count(*) from orders) as records, (select count(*) from "orders$snapshots") as snapshots
                union all select 'lineitem' as "table", (select count(*) from lineitem) as records, (select count(*) from "lineitem$snapshots") as snapshots
            ),
            table_file_infos as (
                select
                    "table",
                    sum(file_size_in_bytes) as size_in_bytes,
                    count(*) as num_files,
                    sum(file_size_in_bytes) / count(*) as avg_file_size,
                    min(file_size_in_bytes) as min_file_size,
                    max(file_size_in_bytes) as max_file_size
                from (
                    select 'nation' as "table", * from "nation$files"
                    union all select 'region' as "table", * from "region$files"
                    union all select 'part' as "table", * from "part$files"
                    union all select 'partsupp' as "table", * from "partsupp$files"
                    union all select 'supplier' as "table", * from "supplier$files"
                    union all select 'customer' as "table", * from "customer$files"
                    union all select 'orders' as "table", * from "orders$files"
                    union all select 'lineitem' as "table", * from "lineitem$files"
                )
                group by 1
            )
        select
            i."table",
            i.records,
            format_number(f.size_in_bytes) as size_in_bytes,
            f.num_files,
            format_number(f.avg_file_size) as avg_file_size,
            format_number(f.min_file_size) as min_file_size,
            format_number(f.max_file_size) as max_file_size,
            i.snapshots,
            f.size_in_bytes / i.records as avg_record_size
        from table_infos as i
        left join table_file_infos as f
        on i."table" = f."table"
    """)
